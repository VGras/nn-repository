# Every template YAML file must begin with a `spec`, without which your template won't compile.
spec:

  # The `templates` section is where you list one or more templates
  templates:

  # This is the name of the template, which is used to reference it in the workflow. This field is required.
  - name: create-data

    # `generic-task` is the supertemplate that all templates (that don't contain a `steps` section) must inherit from
    parent: generic-task

    # This section is for the inputs needed to run the template. This section is required.
    inputs:

      # `parameters` represent initialization values for a template. 
      parameters:

      # The `command` parameter is required because that is what is run by `generic-task`.
      - name: command
        value: python3 main.py 

      # This section creates a script called `main.py` containing the code below under `data`. It must be under the `app` directory in order for the command above to locate it.
      artifacts:
      - name: main-script
        path: /app/main.py
        raw:
          data: |
            from nn import create_data, save_data
            data_dict = create_data()
            save_data([data_dict], ['data.json'])
      # This section is where output artifacts are listed. They must be listed here, or else they will get deleted when the template completes. They must be under the `app` directory in order to be saved.
    outputs:
      artifacts:
      - name: data
        path: /app/data.json

def load_data(filename:TextIO) -> dict:
    """
    Loads data from JSON.
    Args:
      filename (TextIO):
        The file to load the data from.
    Returns:
      data (dict):
        The data that was loaded from the file.
    """

    if isinstance(filename, str):
        try:
            with open(filename, 'r') as f:
                data = json.load(f)

        except IOError:
            print(f'Error: Could not open {filename}')

    else:
        data = json.load(filename)

    return data
